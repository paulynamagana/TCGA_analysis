# get the ensembl gene id of the first row
gene_id = "ENSG00000175003.15"
#SLC22A1_id = "ENSG00000175003.15"
#SLC22A4_id = "ENSG00000197208.6"
#SLC22A5_id = "ENSG00000197375.13"
# also get the common gene name of the first row
gene_name = "SLC22A1"
# visualize the gene expression distribution on the diseased samples
# versus the healthy samples
expr_diseased = d_mat[rownames(clin_df), gene_id]
expr_healthy = d_mat[setdiff(rownames(d_mat), rownames(clin_df)), gene_id]
##plot boxplot expression
png(paste0(save_dir, gene_name, "expression_gene.png"), width=700, height=700)
boxplot(expr_diseased, expr_healthy,
names=c("Diseased", "Healthy"), main="Distribution of gene expression")
dev.off()
# get the expression values for the selected gene
clin_df$gene_value = d_mat[rownames(clin_df), gene_id]
# find the median value of the gene and print it
median_value = median(clin_df$gene_value)
print(median_value)
# divide patients in two groups, up and down regulated.
# if the patient expression is greater or equal to them median we put it
# among the "up-regulated", otherwise among the "down-regulated"
clin_df$gene = ifelse(clin_df$gene_value >= median_value, "UP", "DOWN")
# we can fit a survival model, like we did in the previous section
fit = survfit(Surv(overall_survival, deceased) ~ gene, data=clin_df)
# we can extract the survival p-value and print it
pval = surv_pvalue(fit, data=clin_df)$pval
print(pval)
# and finally, we produce a Kaplan-Meier plot
png(paste0(save_dir, gene_name, "survival_gene.png"), width=800, height=700)
ggsurvplot(fit,
data=clin_df,
pval = TRUE, # add pvalue
risk.table=TRUE,
xlab = "Time in days",   # customize X axis label.
title=paste(gene_name))
dev.off()
# get the ensembl gene id of the first row
gene_id = "ENSG00000197208.6"
#SLC22A1_id = "ENSG00000175003.15"
#SLC22A4_id = "ENSG00000197208.6"
#SLC22A5_id = "ENSG00000197375.13"
# also get the common gene name of the first row
gene_name = "SLC22A4"
# visualize the gene expression distribution on the diseased samples
# versus the healthy samples
expr_diseased = d_mat[rownames(clin_df), gene_id]
expr_healthy = d_mat[setdiff(rownames(d_mat), rownames(clin_df)), gene_id]
##plot boxplot expression
png(paste0(save_dir, gene_name, "expression_gene.png"), width=700, height=700)
boxplot(expr_diseased, expr_healthy,
names=c("Diseased", "Healthy"), main="Distribution of gene expression")
dev.off()
# get the expression values for the selected gene
clin_df$gene_value = d_mat[rownames(clin_df), gene_id]
# find the median value of the gene and print it
median_value = median(clin_df$gene_value)
print(median_value)
# divide patients in two groups, up and down regulated.
# if the patient expression is greater or equal to them median we put it
# among the "up-regulated", otherwise among the "down-regulated"
clin_df$gene = ifelse(clin_df$gene_value >= median_value, "UP", "DOWN")
# we can fit a survival model, like we did in the previous section
fit = survfit(Surv(overall_survival, deceased) ~ gene, data=clin_df)
# we can extract the survival p-value and print it
pval = surv_pvalue(fit, data=clin_df)$pval
print(pval)
# and finally, we produce a Kaplan-Meier plot
png(paste0(save_dir, gene_name, "survival_gene.png"), width=800, height=700)
ggsurvplot(fit,
data=clin_df,
pval = TRUE, # add pvalue
risk.table=TRUE,
xlab = "Time in days",   # customize X axis label.
title=paste(gene_name))
dev.off()
View(v)
v[["E"]]
png(paste0(save_dir, "plot_MD.png"), width=700, height=900)
plotMD(v)
de.off()
png(paste0(save_dir, "plot_MD.png"), width=700, height=900)
plotMD(v)
dev.off()
##plot dispersion
y <- estimateDisp(y, design, robust=TRUE)
##plot dispersion
y <- estimateDisp(v, design, robust=TRUE)
##plot dispersion
y <- estimateDisp(dge, design, robust=TRUE)
#####enrichment for pathways
## The pull function from dplyr is used to extract a particular column
library(org.Hs.eg.db)
pathway_genes <- AnnotationDbi::select(org.Hs.eg.db,
keys = "GO:0030198",
keytype = "GO",
columns="ENSEMBL") %>% pull(ENSEMBL)
#####enrichment for pathways
## The pull function from dplyr is used to extract a particular column
library(org.Hs.eg.db); library(dplyr)
pathway_genes <- AnnotationDbi::select(org.Hs.eg.db,
keys = "GO:0030198",
keytype = "GO",
columns="ENSEMBL") %>% pull(ENSEMBL)
go_table <- mutate(full_results,
inPathway = ENSEMBL %in% pathway_genes,
isDE = padj < 0.05 & abs(log2FoldChange) >1)
go_table <- mutate(full_results,
inPathway = gene_id %in% pathway_genes,
isDE = padj < 0.05 & abs(log2FoldChange) >1)
go_table <- mutate(full_results,
inPathway = gene_id %in% pathway_genes,
isDE = adj.P.Val < 0.05 & abs(log2FoldChange) >1)
go_table <- mutate(full_results,
inPathway = gene_id %in% pathway_genes,
isDE = adj.P.Val < 0.05 & abs(logFC) >1)
go_table
table(go_table$inPathway, go_table$isDE)
#chisquare
chisq.test(table(go_table$inPathway, go_table$isDE))
##analysis with cluterprofile
library(clusterProfiler)
BiocManager::install
BiocManager::install("clusterProfiler")
##analysis with cluterprofile
library(clusterProfiler)
universe <- full_results %>% pull(ENSEMBL)
library(dplyr)
universe <- full_results %>% pull(ENSEMBL)
library(biomaRt)
listMarts()
universe <- full_results %>% pull(gene_id)
sigGenes <- full_results %>%
filter(adj.P.Val < 0.05, !is.na(ENSEMBL)) %>% pull(ENSEMBL)
sigGenes <- full_results %>%
filter(adj.P.Val < 0.05, !is.na(gene_id)) %>% pull(gene_id)
enrich_go <- enrichGO(
gene= sigGenes,
OrgDb = org.Hs.eg.db,
keyType = "ENSEMBL",
ont = "BP",
universe = universe,
qvalueCutoff = 0.05,
readable=TRUE
)
View(full_results)
gene_id_Ensemble <- full_results$gene_id
eset <- v$E
View(eset)
head(eset)
head(colnames(eset))
head(rownames(eset))
###check dimensiones
dim(eset)
as_data <- as.data.frame(eset, SKIP=0)
dim(as_data) # check for no changes
dim(gene_id_Ensemble)
len(gene_id_Ensemble)
length(gene_id_Ensemble)
View(as_data)
as_data[:598]
as_data[,:598]
as_data$probe <- rownames(as_data)
as_data$genes <- gene_id_Ensemble
rownames(as_data) <- NULL
data_long <- gather(as_data, IDATfile, log_fold,
"TCGA-78-7156-01A-11R-2039-07":"TCGA-73-4675-01A-01R-1206-07", factor_key=FALSE)
library(tidyr); library(ggplot2); library(stringr)
data_long <- gather(as_data, IDATfile, log_fold,
"TCGA-78-7156-01A-11R-2039-07":"TCGA-73-4675-01A-01R-1206-07", factor_key=FALSE)
pdata <- clinical_data
View(pdata)
names(pdata)[names(pdata) == "barcode"] <- "IDATfile"
targetinfo <- pdata %>%
dplyr::select(c("IDATfile", "deifinition"))
targetinfo <- pdata %>% select(c("IDATfile", "deifinition"))
View(as_data)
View(data_long)
as_data$Symbol <- v$genes
View(as_data)
targetinfo <- pdata %>% select(c("IDATfile", "definition"))
targetinfo <- select(pdata, "IDATfile", "definition")
library(tidyr); library(ggplot2); library(stringr), library(dplyr) #packages
library(tidyr); library(ggplot2); library(stringr); library(dplyr) #packages
targetinfo <- select(pdata, "IDATfile", "definition")
pdata <- as.matrix(pdata)
View(pdata)
targetinfo <- select(pdata, "IDATfile", "definition")
pdata <- as.data.frame(pdata)
targetinfo <- select(pdata, "IDATfile", "definition")
targetinfo <- dplyr::select(pdata, "IDATfile", "definition")
#merge dataong and targetinfo for groups
data_long <- merge(data_long, targetinfo, by  = "IDATfile")
as_data <- as.data.frame(eset, SKIP=0)
dim(as_data) # check for no changes
library(tidyr); library(ggplot2); library(stringr); library(dplyr) #packages
pdata <- clinical_data
as_data$probe <- gene_id_Ensemble
as_data$Symbol <- v$genes
View(as_data)
View(as_data)
View(as_data)
rownames(as_data) <- NULL
data_long <- gather(as_data, IDATfile, log_fold,
"TCGA-78-7156-01A-11R-2039-07":"TCGA-73-4675-01A-01R-1206-07", factor_key=FALSE)
head(data_long)
View(data_long)
View(full_results)
View(full_results)
View(full_results)
View(full_results)
as_data <- as.data.frame(eset, SKIP=0)
dim(as_data) # check for no changes
pdata <- clinical_data
##fix table with genesnames and probes
as_data$probe <- gene_id_Ensemble
as_data$Symbol <- v$genes$gene_name
rownames(as_data) <- NULL
View(as_data)
data_long <- gather(as_data, IDATfile, log_fold,
"TCGA-78-7156-01A-11R-2039-07":"TCGA-73-4675-01A-01R-1206-07", factor_key=FALSE)
head(data_long)
pdata <- clinical_data
#change names to match the functions
names(pdata)[names(pdata) == "barcode"] <- "IDATfile"
pdata <- as.data.frame(pdata) #convert
targetinfo <- dplyr::select(pdata, "IDATfile", "definition") #extract columns
#merge dataong and targetinfo for groups
data_long <- merge(data_long, targetinfo, by  = "IDATfile")
names(data_long)[names(data_long) == "definition"] <- "Group" # change name
#save data
write.csv(data_long, "data_long.csv")
###filter for genes of interest
SLC22A1_table <- data_long %>%
filter(genes == "SLC22A1")
###filter for genes of interest
SLC22A1_table <- data_long %>%
filter(Symbol == "SLC22A1")
SLC22A4_table <- data_long %>%
filter(Symbol == "SLC22A4")
SLC22A5_table <- data_long %>%
filter(Symbol == "SLC22A5")
#function for plotting per gene
plot_gene <- function(data, title){
ggplot(data, aes(x= Group, log_fold)) +
geom_boxplot(outlier.shape = NA, color= "black",fill= c("gray60", "gray33")) +
geom_jitter(width=0.08, height = 0.5, size= 2.0, color= "black") +
ggtitle(data$genes, subtitle = my_id) +# We'll make this a jitter plot
ylab("Expression") +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, size=24),
axis.title = element_text(size = 20), # font size of axis
axis.text.x = element_text(size=16), #font size of x ticks
axis.text.y = element_text(size=14),
panel.border = element_rect(colour = "black", fill=NA, linewidth=1))+ # font size of y ticks
scale_y_continuous(breaks = round(seq(min(data$log_fold), max(data$log_fold), by = 0.5),1))
ggsave(title, width = 15,height = 25, units="cm")
}
## save plots ##
plot_gene(SLC22A1_table, paste0(save_dir,"SLC22A1_expression.png"))
#function for plotting per gene
plot_gene <- function(data, title){
ggplot(data, aes(x= Group, log_fold)) +
geom_boxplot(outlier.shape = NA, color= "black",fill= c("gray60", "gray33")) +
geom_jitter(width=0.08, height = 0.5, size= 2.0, color= "black") +
ggtitle(data$genes, subtitle = "TCGA LUAD") +# We'll make this a jitter plot
ylab("Expression") +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, size=24),
axis.title = element_text(size = 20), # font size of axis
axis.text.x = element_text(size=16), #font size of x ticks
axis.text.y = element_text(size=14),
panel.border = element_rect(colour = "black", fill=NA, linewidth=1))+ # font size of y ticks
scale_y_continuous(breaks = round(seq(min(data$log_fold), max(data$log_fold), by = 0.5),1))
ggsave(title, width = 15,height = 25, units="cm")
}
## save plots ##
plot_gene(SLC22A1_table, paste0(save_dir,"SLC22A1_expression.png"))
plot_gene(SLC22A4_table, paste0(save_dir,"SLC22A4_expression.png"))
plot_gene(SLC22A5_table, paste0(save_dir,"SLC22A5_expression.png"))
# and finally, we produce a Kaplan-Meier plot
png(paste0(save_dir, gene_name, "survival_gene.png"), width=800, height=700)
ggsurvplot(fit,
data=clin_df,
pval = TRUE, # add pvalue
risk.table=TRUE,
xlab = "Time in days",   # customize X axis label.
title=paste(gene_name),
border = 'full',
borderWidth = 1.0,
borderColour = 'black')
dev.off()
###query all the data
query_TCGA_raw = GDCquery(
project = "TCGA-LUAD",
data.category = "Transcriptome Profiling", # parameter enforced by GDCquery
access= "open",
experimental.strategy = "RNA-Seq",
workflow.type = "HTSeq - Counts",
data.type = "Gene Expression Quantification",
sample.type = c("Primary Tumor", "Solid Tissue Normal")) #double check
DGE$samples$norm.factors
dge$samples$norm.factors
v
#function for plotting per gene
plot_gene <- function(data, title){
ggplot(data, aes(x= Group, log_fold)) +
geom_boxplot(outlier.shape = NA, color= "black",fill= c("gray60", "gray33")) +
geom_jitter(width=0.08, height = 0.5, size= 2.0, color= "black") +
ggtitle(data$genes, subtitle = "TCGA LUAD") +# We'll make this a jitter plot
ylab("Expression log2 scale") +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, size=24),
axis.title = element_text(size = 20), # font size of axis
axis.text.x = element_text(size=16), #font size of x ticks
axis.text.y = element_text(size=14),
panel.border = element_rect(colour = "black", fill=NA, linewidth=1))+ # font size of y ticks
scale_y_continuous(breaks = round(seq(min(data$log_fold), max(data$log_fold), by = 0.5),1))
ggsave(title, width = 15,height = 25, units="cm")
}
## save plots ##
plot_gene(SLC22A1_table, paste0(save_dir,"SLC22A1_expression.png"))
plot_gene(SLC22A4_table, paste0(save_dir,"SLC22A4_expression.png"))
plot_gene(SLC22A5_table, paste0(save_dir,"SLC22A5_expression.png"))
######################plot all SLC22 genes in boxplot
#table
SLC22 <- data_long %>%
filter(stringr::str_detect(genes, "SLC22A"))
plot_all_genes <- function(data, title){
ggplot(data, aes(x= genes ,log_fold, fill=Group))  +
geom_boxplot(outlier.shape = NA, color= "black", position="dodge") +
ggtitle(my_id, subtitle="cohort: Primary solid Solid (n=539) Tissue Normal (n=59)") +
ylab("Log2(counts+1)") +
xlab("") +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, size=20),
axis.title = element_text(size = 18), # font size of axis
axis.text.x = element_text(size=16, angle = 90), #font size of x ticks
axis.text.y = element_text(size=12))+ # font size of y ticks
scale_y_continuous(breaks = round(seq(min(data$log_fold), max(data$log_fold), by = 0.5),1))+
scale_fill_manual(values=c("gray60", "gray33"))
ggsave(title, width = 35,height = 20, units="cm")
}
#plot and save
plot_all_genes(SLC22, paste0(save_dir,"SLC22_expression.png"))
######################plot all SLC22 genes in boxplot
#table
SLC22 <- data_long %>%
filter(stringr::str_detect(Symbol, "SLC22A"))
plot_all_genes <- function(data, title){
ggplot(data, aes(x= genes ,log_fold, fill=Group))  +
geom_boxplot(outlier.shape = NA, color= "black", position="dodge") +
ggtitle(my_id, subtitle="cohort: Primary solid Solid (n=539) Tissue Normal (n=59)") +
ylab("Log2(counts+1)") +
xlab("") +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, size=20),
axis.title = element_text(size = 18), # font size of axis
axis.text.x = element_text(size=16, angle = 90), #font size of x ticks
axis.text.y = element_text(size=12))+ # font size of y ticks
scale_y_continuous(breaks = round(seq(min(data$log_fold), max(data$log_fold), by = 0.5),1))+
scale_fill_manual(values=c("gray60", "gray33"))
ggsave(title, width = 35,height = 20, units="cm")
}
#plot and save
plot_all_genes(SLC22, paste0(save_dir,"SLC22_expression.png"))
ggplot(data, aes(x= genes ,log_fold, fill=Group))  +
geom_boxplot(outlier.shape = NA, color= "black", position="dodge") +
ggtitle("TCGA-LUAD ", subtitle="cohort: Primary solid Solid (n=539) Tissue Normal (n=59)") +
ylab("Log2(counts+1)") +
xlab("") +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, size=20),
axis.title = element_text(size = 18), # font size of axis
axis.text.x = element_text(size=16, angle = 90), #font size of x ticks
axis.text.y = element_text(size=12))+ # font size of y ticks
scale_y_continuous(breaks = round(seq(min(data$log_fold), max(data$log_fold), by = 0.5),1))+
scale_fill_manual(values=c("gray60", "gray33"))
plot_all_genes <- function(data, title){
ggplot(data, aes(x= genes ,log_fold, fill=Group))  +
geom_boxplot(outlier.shape = NA, color= "black", position="dodge") +
ggtitle("TCGA-LUAD ", subtitle="cohort: Primary solid Solid (n=539) Tissue Normal (n=59)") +
ylab("Log2(counts+1)") +
xlab("") +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, size=20),
axis.title = element_text(size = 18), # font size of axis
axis.text.x = element_text(size=16, angle = 90), #font size of x ticks
axis.text.y = element_text(size=12))+ # font size of y ticks
scale_y_continuous(breaks = round(seq(min(data$log_fold), max(data$log_fold), by = 0.5),1))+
scale_fill_manual(values=c("gray60", "gray33"))
ggsave(title, width = 35,height = 20, units="cm")
}
#plot a
#plot and save
plot_all_genes(SLC22, paste0(save_dir,"SLC22_expression.png"))
plot_all_genes <- function(data, title){
ggplot(data, aes(x= Symbol ,log_fold, fill=Group))  +
geom_boxplot(outlier.shape = NA, color= "black", position="dodge") +
ggtitle("TCGA-LUAD ", subtitle="cohort: Primary solid Solid (n=539) Tissue Normal (n=59)") +
ylab("Log2(counts+1)") +
xlab("") +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, size=20),
axis.title = element_text(size = 18), # font size of axis
axis.text.x = element_text(size=16, angle = 90), #font size of x ticks
axis.text.y = element_text(size=12))+ # font size of y ticks
scale_y_continuous(breaks = round(seq(min(data$log_fold), max(data$log_fold), by = 0.5),1))+
scale_fill_manual(values=c("gray60", "gray33"))
ggsave(title, width = 35,height = 20, units="cm")
}
#plot and save
plot_all_genes(SLC22, paste0(save_dir,"SLC22_expression.png"))
plot_all_genes <- function(data, title){
ggplot(data, aes(x= Symbol ,log_fold, fill=Group))  +
geom_boxplot(outlier.shape = NA, color= "black", position="dodge") +
ggtitle("TCGA-LUAD ", subtitle="cohort: Primary solid Solid (n=539) Tissue Normal (n=59)") +
ylab("Log2(counts+1)") +
xlab("") +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, size=20),
axis.title = element_text(size = 18), # font size of axis
axis.text.x = element_text(size=16, angle = 90), #font size of x ticks
axis.text.y = element_text(size=12))+ # font size of y ticks
scale_y_continuous(breaks = round(seq(min(data$log_fold), max(data$log_fold), by = 1.5),1))+
scale_fill_manual(values=c("gray60", "gray33"))
ggsave(title, width = 35,height = 20, units="cm")
}
#plot and save
plot_all_genes(SLC22, paste0(save_dir,"SLC22_expression.png"))
gene_id<-sub("^","X", gene_id)
############################ Go enrichment
universe <- full_results %>% pull(gene_id)
##extract data for slc22a plot
gene_id_Ensemble <- full_results$gene_id
gene_id<-sub("\\..*","", gene_id_Ensemble)
full_results$ENSEMBL <- gene_id
sigGenes <- full_results %>%
filter(adj.P.Val < 0.05, !is.na(ENSEMBL)) %>% pull(ENSEMBL)
enrich_go <- enrichGO(
gene= sigGenes,
OrgDb = org.Hs.eg.db,
keyType = "ENSEMBL",
ont = "BP",
universe = gene_id,
qvalueCutoff = 0.05,
readable=TRUE
)
#turn into datafram
enrich_go %>% data.frame
##top 20 categories
png(paste0(save_dir, "ennrich_GO_top20.png"), width=700, height=900)
dotplot(enrich_go,
showCategory=20)
dev.off()
#sumary tests
#Significance is defined using an adjusted p-value cutoff that is set at 5% by default.
summary(decideTests(efit))
#topTable we can check the top10 genes classified as being differentially expressed. ’
# Show top genes
full_results <- topTable(efit, coef=2, number=Inf)
View(full_results)
#topTable we can check the top10 genes classified as being differentially expressed. ’
# Show top genes
full_results <- topTable(efit, number=Inf)
View(design)
enrich_go <- enrichplot::pairwise_termsim(enrich_go)
png(paste0(save_dir, "ennrich_GO_top20_pairwise.png"), width=700, height=900)
emapplot(enrich_go)
dev.off()
png(paste0(save_dir, "ennrich_GO_top20_pairwiseupset.png"), width=700, height=900)
enrichplot::upsetplot(enrich_go)
install.packages("ggupset")
png(paste0(save_dir, "ennrich_GO_top20_pairwiseupset.png"), width=700, height=900)
enrichplot::upsetplot(enrich_go)
dev.off()
topGenes = topTable(efit, coef=2, sort.by="p")
topGenes = topTable(efit, coef=2, sort.by="p", numer=100)
topGenes = topTable(efit, coef=2, sort.by="p", number=100)
write.table(topGenes, paste0(save_dir, " top100genes.csv"))
write.csv(topGenes, paste0(save_dir, " top100genes.csv"))
View(topGenes)
View(v)
View(luad.count)
anno <- AnnotationDbi::select(org.Hs.eg.db,
columns=c("ENSEMBL","GENENAME"),
keys=gene_id_Ensemble,
keytype = "SYMBOL")
anno <- AnnotationDbi::select(org.Hs.eg.db,
columns=c("ENSEMBL","GENENAME"),
keys=gene_id_Ensemble,
keytype = "ENSEMBL")
anno <- AnnotationDbi::select(org.Hs.eg.db,
columns=c("ENSEMBL","GENENAME"),
keys=gene_id,
keytype = "ENSEMBL")
View(anno)
View(full_results)
full_results$gene_id <- sub("\\..*","", full_results$gene_id)
View(full_results)
anno <- rename(anno, "ENSEMBL", "gene_id")
anno <- rename(anno, "gene_id", "ENSEMBL")
names(anno)[names(anno) == "ENSEMBL"] <- "gene_id"
##export results
export_results <- merge(full_results, anno, by=gene_id)
##export results
export_results <- merge(full_results, anno, by="gene_id")
write.csv(export_results, "exportedresults.csv")
View(export_results)
View(efit)
